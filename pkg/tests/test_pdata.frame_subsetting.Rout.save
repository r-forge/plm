
R version 4.1.0 (2021-05-18) -- "Camp Pontanezen"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # various test of subsetting ("indexing") a pdata.frame and a pseries (the latter currently commented),
> # e.g., that subsetting by rownames preserves the index
> #  (pre rev. 187/189 all entries were set to NA)
> #  (pre rev. 251 subsetting a pdata.frame added extra information due to coercing rules of "[.data.frame")
> #  (pre rev. 668 subsetting a pdata.frame with [.pdata.frame such that a single column (pseries) is returned was lacking names)
> 
> library(plm)
> data("Grunfeld", package = "plm")
> 
> pGrunfeld <- pdata.frame(Grunfeld)
> 
> # subsetting with [] with rownames - works
> attr(pGrunfeld[c("1-1935"), ], which = "index")
  firm year
1    1 1935
> attr(pGrunfeld[c("1-1935", "1-1936"), ], which = "index")
  firm year
1    1 1935
2    1 1936
> 
> if (anyNA(attr(pGrunfeld[c("1-1935"), ], which = "index"))) stop("FAIL: NA in index")
> if (anyNA(attr(pGrunfeld[c("1-1935", "1-1936"), ], which = "index"))) stop("FAIL: NA in index")
> 
> 
> # subsetting with [] by line number works (indexes preserved)
> if (!all(attr(pGrunfeld[c(1), ], which = "index") == c(1, 1935))) stop("wrong index!")
> if (!all(attr(pGrunfeld[c(1,2), ], which = "index") == data.frame(firm = c(1,1), year = c(1935, 1936)))) stop("wrong index!")
> 
> if (anyNA(attr(pGrunfeld[c(1), ], which = "index"))) stop("FAIL: NA in index")
> if (anyNA(attr(pGrunfeld[c(1,2), ], which = "index"))) stop("FAIL: NA in index")
> 
> # subsetting with [[]] works (indexes preserved)
> attr(pGrunfeld[["inv"]], which = "index")
    firm year
1      1 1935
2      1 1936
3      1 1937
4      1 1938
5      1 1939
6      1 1940
7      1 1941
8      1 1942
9      1 1943
10     1 1944
11     1 1945
12     1 1946
13     1 1947
14     1 1948
15     1 1949
16     1 1950
17     1 1951
18     1 1952
19     1 1953
20     1 1954
21     2 1935
22     2 1936
23     2 1937
24     2 1938
25     2 1939
26     2 1940
27     2 1941
28     2 1942
29     2 1943
30     2 1944
31     2 1945
32     2 1946
33     2 1947
34     2 1948
35     2 1949
36     2 1950
37     2 1951
38     2 1952
39     2 1953
40     2 1954
41     3 1935
42     3 1936
43     3 1937
44     3 1938
45     3 1939
46     3 1940
47     3 1941
48     3 1942
49     3 1943
50     3 1944
51     3 1945
52     3 1946
53     3 1947
54     3 1948
55     3 1949
56     3 1950
57     3 1951
58     3 1952
59     3 1953
60     3 1954
61     4 1935
62     4 1936
63     4 1937
64     4 1938
65     4 1939
66     4 1940
67     4 1941
68     4 1942
69     4 1943
70     4 1944
71     4 1945
72     4 1946
73     4 1947
74     4 1948
75     4 1949
76     4 1950
77     4 1951
78     4 1952
79     4 1953
80     4 1954
81     5 1935
82     5 1936
83     5 1937
84     5 1938
85     5 1939
86     5 1940
87     5 1941
88     5 1942
89     5 1943
90     5 1944
91     5 1945
92     5 1946
93     5 1947
94     5 1948
95     5 1949
96     5 1950
97     5 1951
98     5 1952
99     5 1953
100    5 1954
101    6 1935
102    6 1936
103    6 1937
104    6 1938
105    6 1939
106    6 1940
107    6 1941
108    6 1942
109    6 1943
110    6 1944
111    6 1945
112    6 1946
113    6 1947
114    6 1948
115    6 1949
116    6 1950
117    6 1951
118    6 1952
119    6 1953
120    6 1954
121    7 1935
122    7 1936
123    7 1937
124    7 1938
125    7 1939
126    7 1940
127    7 1941
128    7 1942
129    7 1943
130    7 1944
131    7 1945
132    7 1946
133    7 1947
134    7 1948
135    7 1949
136    7 1950
137    7 1951
138    7 1952
139    7 1953
140    7 1954
141    8 1935
142    8 1936
143    8 1937
144    8 1938
145    8 1939
146    8 1940
147    8 1941
148    8 1942
149    8 1943
150    8 1944
151    8 1945
152    8 1946
153    8 1947
154    8 1948
155    8 1949
156    8 1950
157    8 1951
158    8 1952
159    8 1953
160    8 1954
161    9 1935
162    9 1936
163    9 1937
164    9 1938
165    9 1939
166    9 1940
167    9 1941
168    9 1942
169    9 1943
170    9 1944
171    9 1945
172    9 1946
173    9 1947
174    9 1948
175    9 1949
176    9 1950
177    9 1951
178    9 1952
179    9 1953
180    9 1954
181   10 1935
182   10 1936
183   10 1937
184   10 1938
185   10 1939
186   10 1940
187   10 1941
188   10 1942
189   10 1943
190   10 1944
191   10 1945
192   10 1946
193   10 1947
194   10 1948
195   10 1949
196   10 1950
197   10 1951
198   10 1952
199   10 1953
200   10 1954
> attr(pGrunfeld[[3]], which = "index")
    firm year
1      1 1935
2      1 1936
3      1 1937
4      1 1938
5      1 1939
6      1 1940
7      1 1941
8      1 1942
9      1 1943
10     1 1944
11     1 1945
12     1 1946
13     1 1947
14     1 1948
15     1 1949
16     1 1950
17     1 1951
18     1 1952
19     1 1953
20     1 1954
21     2 1935
22     2 1936
23     2 1937
24     2 1938
25     2 1939
26     2 1940
27     2 1941
28     2 1942
29     2 1943
30     2 1944
31     2 1945
32     2 1946
33     2 1947
34     2 1948
35     2 1949
36     2 1950
37     2 1951
38     2 1952
39     2 1953
40     2 1954
41     3 1935
42     3 1936
43     3 1937
44     3 1938
45     3 1939
46     3 1940
47     3 1941
48     3 1942
49     3 1943
50     3 1944
51     3 1945
52     3 1946
53     3 1947
54     3 1948
55     3 1949
56     3 1950
57     3 1951
58     3 1952
59     3 1953
60     3 1954
61     4 1935
62     4 1936
63     4 1937
64     4 1938
65     4 1939
66     4 1940
67     4 1941
68     4 1942
69     4 1943
70     4 1944
71     4 1945
72     4 1946
73     4 1947
74     4 1948
75     4 1949
76     4 1950
77     4 1951
78     4 1952
79     4 1953
80     4 1954
81     5 1935
82     5 1936
83     5 1937
84     5 1938
85     5 1939
86     5 1940
87     5 1941
88     5 1942
89     5 1943
90     5 1944
91     5 1945
92     5 1946
93     5 1947
94     5 1948
95     5 1949
96     5 1950
97     5 1951
98     5 1952
99     5 1953
100    5 1954
101    6 1935
102    6 1936
103    6 1937
104    6 1938
105    6 1939
106    6 1940
107    6 1941
108    6 1942
109    6 1943
110    6 1944
111    6 1945
112    6 1946
113    6 1947
114    6 1948
115    6 1949
116    6 1950
117    6 1951
118    6 1952
119    6 1953
120    6 1954
121    7 1935
122    7 1936
123    7 1937
124    7 1938
125    7 1939
126    7 1940
127    7 1941
128    7 1942
129    7 1943
130    7 1944
131    7 1945
132    7 1946
133    7 1947
134    7 1948
135    7 1949
136    7 1950
137    7 1951
138    7 1952
139    7 1953
140    7 1954
141    8 1935
142    8 1936
143    8 1937
144    8 1938
145    8 1939
146    8 1940
147    8 1941
148    8 1942
149    8 1943
150    8 1944
151    8 1945
152    8 1946
153    8 1947
154    8 1948
155    8 1949
156    8 1950
157    8 1951
158    8 1952
159    8 1953
160    8 1954
161    9 1935
162    9 1936
163    9 1937
164    9 1938
165    9 1939
166    9 1940
167    9 1941
168    9 1942
169    9 1943
170    9 1944
171    9 1945
172    9 1946
173    9 1947
174    9 1948
175    9 1949
176    9 1950
177    9 1951
178    9 1952
179    9 1953
180    9 1954
181   10 1935
182   10 1936
183   10 1937
184   10 1938
185   10 1939
186   10 1940
187   10 1941
188   10 1942
189   10 1943
190   10 1944
191   10 1945
192   10 1946
193   10 1947
194   10 1948
195   10 1949
196   10 1950
197   10 1951
198   10 1952
199   10 1953
200   10 1954
> 
> if (anyNA(attr(pGrunfeld[["inv"]], which = "index"))) stop("FAIL: NA in index")
> if (anyNA(attr(pGrunfeld[[3]], which = "index"))) stop("FAIL: NA in index")
> 
> 
> # check that extracting a single column (which becomes a pseries) yield the same
> # result for the three extraction methods $.pdata.freme, [[.pdata.frame, and [.pdata.frame
> extr1 <- pGrunfeld$inv
> extr2 <- pGrunfeld[["inv"]]
> extr3 <- pGrunfeld[ , "inv"]
> if (!isTRUE(all.equal(extr1, extr2))) stop("extraction of single column (pseries) does not yield same results for $.pdata.frame and [[.pdata.frame")
> if (!isTRUE(all.equal(extr1, extr3))) stop("extraction of single column (pseries) does not yield same results for $.pdata.frame and [.pdata.frame")
> 
> # check that row names are kept and subsetted by [.pdata.frame when a single column (pseries) is returned
> if (!isTRUE(all.equal(names(pGrunfeld[1:5 , "inv"]), row.names(pGrunfeld)[1:5]))) stop("row names not correctly subsetted by [.pdata.frame")
> 
> 
> ############ subsetting used to change the pdata.frame
> ########## since rev.252 this is fully fixed (rev. 251 already fixed large parts of this),
> ########## pre rev 251 a lot of unnecessary information was added to the pdata.frame by subsetting 
> 
> # this should yield a structurally identical pdata.frame as all rows are extracted:
> Grunfeld2 <- Grunfeld[1:nrow(Grunfeld), ]
> pGrunfeld2 <- pGrunfeld[1:nrow(pGrunfeld), ]
> 
> identical(Grunfeld, Grunfeld2)    # TRUE for data.frame
[1] TRUE
> identical(pGrunfeld, pGrunfeld2)  # TRUE for pdata.frame (was FALSE pre rev. 252)
[1] TRUE
> if (!identical(pGrunfeld, pGrunfeld2))
+   stop("pdata.frame not identical after \"subsetting\" with all rows (which should actually not do any subsetting))")
> 
> ### compare object sizes
> # object.size(pGrunfeld)  # 37392 bytes
> # object.size(pGrunfeld2) # 37392 bytes since rev. 252 # (was: 83072 bytes in pre rev.251, considerably larger!)
>                                                        # (was: 26200 bytes in rev. 251)
> # if (!object.size(pGrunfeld) == object.size(pGrunfeld2))
> #   print("pdata.frame not same object size after \"subsetting\" with all rows (which should actually not do any subsetting))")
> 
> # this is likely to be unnecessarily pedantic, because by default attrib.as.set is TRUE
> # and from ?attributes "Attributes are not stored internally as a list and should be 
> # thought of as a set and not a vector."
> identical(Grunfeld, Grunfeld2,   attrib.as.set = FALSE)  # TRUE for data.frame
[1] TRUE
> identical(pGrunfeld, pGrunfeld2, attrib.as.set = FALSE)  # FALSE for pdata.frame
[1] FALSE
> 
> # display differences (if any) [with rev. 252 there should be no differences left]
> all.equal(pGrunfeld, pGrunfeld2)
[1] TRUE
> all.equal(pGrunfeld, pGrunfeld2, check.attributes = FALSE)
[1] TRUE
> # compare::compare(pGrunfeld, pGrunfeld2, allowAll = TRUE)
> 
> 
> # Unused levels from the index attribute of a pdata.frame shall be dropped
> # (NB: unused levels are not dropped from the variables of the pdata.frame as this is standard R behaviour)
> pGrunfeld_sub_id <- pGrunfeld[-c(1:20), ] # drop first individual (1st ind. is in first 20 rows)
> if (!isTRUE(all.equal(levels(attr(pGrunfeld_sub_id, "index")[[1]]), levels(factor(2:10)))))
+   stop("unused levels from index (individual) not dropped")
> 
> pGrunfeld_sub_year <- pGrunfeld[!pGrunfeld$year %in% "1936", ] # drop year 1936
> if (!isTRUE(all.equal(levels(attr(pGrunfeld_sub_year, "index")[[2]]), levels(factor(c(1935, 1937:1954))))))
+   stop("unused levels from index (time) not dropped")
> 
> 
> 
> 
> 
> 
> 
> 
> 
> #### test estimation by plm on a subsetted pdata.frame (failed pre rev. 251)
> pGrunfeld_sub <- pGrunfeld[c(23:99), ]
> plm(inv ~ value + capital, data = pGrunfeld[c(23:99), ]) # failed pre rev.251

Model Formula: inv ~ value + capital

Coefficients:
   value  capital 
0.066117 0.173627 

> 
>   # classes of index of pdata.frame and subsetted pdata.frame are the same 'pindex' and 'data.frame')
>   class(attr(pGrunfeld, which="index"))
[1] "pindex"     "data.frame"
>   class(attr(pGrunfeld$inv, which="index"))
[1] "pindex"     "data.frame"
>   if (!all(class(attr(pGrunfeld, which="index")) == class(attr(pGrunfeld$inv, which="index")))) stop("classes differ!")
>   
>   # classes of index of columns of pdata.frame and subsetted pdata.frame must be the same 'pindex' and 'data.frame')
>   class(attr(pGrunfeld$inv, which="index"))
[1] "pindex"     "data.frame"
>   class(attr(pGrunfeld_sub$inv, which="index"))
[1] "pindex"     "data.frame"
>   if (!all(class(attr(pGrunfeld$inv, which="index")) == class(attr(pGrunfeld_sub$inv, which="index")))) stop("classes differ!")
> 
> 
> ############ further testing subsetting of pdata.frame and its index
> # up to rev.254 subetting by [i] (with missing j) did not mimic data.frame behavior in case of missing j (j as in [i, j])
> # fixed in rev.255
> data("Grunfeld", package = "plm")
> X <- Grunfeld
> pX <- pdata.frame(X)
> 
> ###### test dimensions of subsetted pdata.frame
> if (!isTRUE(all.equal(dim(X[]), dim(pX[])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
> if (!isTRUE(all.equal(dim(X[ , ]), dim(pX[ ,])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
> if (!isTRUE(all.equal(dim(X[ , , ]), dim(pX[ , , ])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
> if (!isTRUE(all.equal(dim(X[ , , drop = TRUE]),  dim(pX[ , , drop = TRUE])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
> if (!isTRUE(all.equal(dim(X[ , , drop = FALSE]), dim(pX[ , , drop = FALSE])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
> 
> 
> if (!isTRUE(all.equal(dim(X[1:10, 2:4]),               dim(pX[1:10, 2:4])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
> if (!isTRUE(all.equal(dim(X[1:10, 2:4, drop = TRUE]),  dim(pX[1:10, 2:4, drop = TRUE])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
> if (!isTRUE(all.equal(dim(X[1:10, 2:4, drop = FALSE]), dim(pX[1:10, 2:4, drop = FALSE])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
> 
> if (!isTRUE(all.equal(dim(X[1:10, , ]),              dim(pX[1:10, , ])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
> if (!isTRUE(all.equal(dim(X[1:10, , drop = TRUE]),   dim(pX[1:10, , drop = TRUE])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
> if (!isTRUE(all.equal(dim(X[1:10, , drop = FALSE]),  dim(pX[1:10, , drop = FALSE])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
> 
> 
> if (!isTRUE(all.equal(dim(X[1:10, ]),    dim(pX[1:10, ])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
> if (!isTRUE(all.equal(dim(X[1, ]),        dim(pX[1, ])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
> 
> if (!isTRUE(all.equal(dim(X[1]),                 dim(pX[1])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
> if (!isTRUE(all.equal(dim(X[1, drop = TRUE]),    dim(pX[1, drop = TRUE])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
Warning messages:
1: In `[.data.frame`(X, 1, drop = TRUE) : 'drop' argument will be ignored
2: In `[.data.frame`(x, 1, drop = TRUE) : 'drop' argument will be ignored
> if (!isTRUE(all.equal(dim(X[1, drop = FALSE]),   dim(pX[1, drop = FALSE])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
Warning messages:
1: In `[.data.frame`(X, 1, drop = FALSE) : 'drop' argument will be ignored
2: In `[.data.frame`(x, 1, drop = FALSE) : 'drop' argument will be ignored
> 
> if (!isTRUE(all.equal(dim(X[1:2]),               dim(pX[1:2])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
> if (!isTRUE(all.equal(dim(X[1:2, drop = TRUE]),  dim(pX[1:2, drop = TRUE])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
Warning messages:
1: In `[.data.frame`(X, 1:2, drop = TRUE) :
  'drop' argument will be ignored
2: In `[.data.frame`(x, 1:2, drop = TRUE) :
  'drop' argument will be ignored
> if (!isTRUE(all.equal(dim(X[1:2, drop = FALSE]), dim(pX[1:2, drop = FALSE])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
Warning messages:
1: In `[.data.frame`(X, 1:2, drop = FALSE) :
  'drop' argument will be ignored
2: In `[.data.frame`(x, 1:2, drop = FALSE) :
  'drop' argument will be ignored
> 
> if (!isTRUE(all.equal(dim(X[ , 2:4]), dim(pX[ , 2:4])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
> if (!isTRUE(all.equal(dim(X[ , 2:4, drop = TRUE]),  dim(pX[ , 2:4, drop = TRUE])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
> if (!isTRUE(all.equal(dim(X[ , 2:4 ,drop = FALSE]), dim(pX[ , 2:4, drop = FALSE])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
> 
> if (!isTRUE(all.equal(dim(X[ , 3]),               dim(pX[ , 3])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
> if (!isTRUE(all.equal(dim(X[ , 3, drop = TRUE]),  dim(pX[ , 3, drop = TRUE])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
> if (!isTRUE(all.equal(dim(X[ , 3, drop = FALSE]), dim(pX[ , 3, drop = FALSE])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
> 
> if (!isTRUE(all.equal(dim(X[1, , ]),             dim(pX[1, , ])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
> if (!isTRUE(all.equal(dim(X[1, , drop = TRUE]),  dim(pX[1, , drop = TRUE])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
> if (!isTRUE(all.equal(dim(X[1, , drop = FALSE]), dim(pX[1, , drop = FALSE])))) stop("dimensions of data.frame and pdata.frame not equal after subsetting")
> 
> 
> ###### test dimensions of index of subsetted pdata.frame
> if (!all(c(dim(pX[1:10, 2:4])[1], 2L) == dim(attr(pX[1:10, 2:4], "index")))) stop("index has wrong dimension after subsetting")
> if (!all(c(dim(pX[1:10,    ])[1], 2L) == dim(attr(pX[1:10,    ], "index")))) stop("index has wrong dimension after subsetting")
> if (!all(c(dim(pX[    , 2:4])[1], 2L) == dim(attr(pX[    , 2:4], "index")))) stop("index has wrong dimension after subsetting")
> 
> # NB: this is class c("pseries", "numeric), need length here
> if (!all(c(length(pX[ , 3]), 2L) == dim(attr(pX[ , 3], "index")))) stop("index has wrong dimension after subsetting")
> 
> # NB: this is class c("pseries", "numeric), need length here
> if (!all(c(length(pX[ , 3, drop = TRUE]), 2L) == dim(attr(pX[ , 3, drop = TRUE], "index")))) stop("index has wrong dimension after subsetting")
> 
> # need dim again here, because drop = FALSE
> if (!all(c(dim(pX[ , 3, drop = FALSE])[1], 2L) == dim(attr(pX[ , 3, drop = FALSE], "index")))) stop("index has wrong dimension after subsetting")
> 
> # NB: this is a list! has no index anymore
> length(pX[1, , drop = TRUE])
[1] 5
> # NB: this a a pdata.frame (drop = FALSE)
> if (!all(c(dim(pX[1, , drop = FALSE])[1], 2L) == dim(attr(pX[1, , drop = FALSE], "index")))) stop("index has wrong dimension after subsetting")
> 
> 
> # case of [i]-indexing with missing j: index must be have full rows
> # dim of pdata.frame: 25, 3
> if (!all(c(dim(pX[2:4])[1], 2L)               == dim(attr(pX[2:4],               "index")))) stop("index has wrong dimension after subsetting")
> if (!all(c(dim(pX[2:4, drop = TRUE])[1],  2L) == dim(attr(pX[2:4, drop = TRUE],  "index")))) stop("index has wrong dimension after subsetting")
Warning messages:
1: In `[.data.frame`(x, 2:4, drop = TRUE) :
  'drop' argument will be ignored
2: In `[.data.frame`(x, 2:4, drop = TRUE) :
  'drop' argument will be ignored
> if (!all(c(dim(pX[2:4, drop = FALSE])[1], 2L) == dim(attr(pX[2:4, drop = FALSE], "index")))) stop("index has wrong dimension after subsetting")
Warning messages:
1: In `[.data.frame`(x, 2:4, drop = FALSE) :
  'drop' argument will be ignored
2: In `[.data.frame`(x, 2:4, drop = FALSE) :
  'drop' argument will be ignored
> 
> if (!all(c(dim(pX[1])[1], 2L)               == dim(attr(pX[1],               "index")))) stop("index has wrong dimension after subsetting")
> if (!all(c(dim(pX[1, drop = TRUE])[1],  2L) == dim(attr(pX[1, drop = TRUE],  "index")))) stop("index has wrong dimension after subsetting")
Warning messages:
1: In `[.data.frame`(x, 1, drop = TRUE) : 'drop' argument will be ignored
2: In `[.data.frame`(x, 1, drop = TRUE) : 'drop' argument will be ignored
> if (!all(c(dim(pX[1, drop = FALSE])[1], 2L) == dim(attr(pX[1, drop = FALSE], "index")))) stop("index has wrong dimension after subsetting")
Warning messages:
1: In `[.data.frame`(x, 1, drop = FALSE) : 'drop' argument will be ignored
2: In `[.data.frame`(x, 1, drop = FALSE) : 'drop' argument will be ignored
> 
> 
> ####### test return values (named) numeric(0) etc and especially NULL
> 
> ## compare pdata.frame() to data.frame() in case of subsetting with non-existent return values
> # firm 31 is non-existent
> # valueNonExistent is non-existent
> 
> pGrunfeld[pGrunfeld$firm == "31"]
data frame with 0 columns and 200 rows
> 
> Grunfeld[Grunfeld$firm == "31"]
data frame with 0 columns and 200 rows
> 
> 
> pGrunfeld[pGrunfeld$firm == "31", "value"]
named numeric(0)
> 
> Grunfeld[Grunfeld$firm == "31", "value"]
numeric(0)
> 
> #### since R 3.4.0 the following two cases gave a warning which was pacified in rev. 626
> # Warning in structure(mydata, index = index, class = base::union("pseries",  :
> #                                                                   Calling 'structure(NULL, *)' is deprecated, as NULL cannot have attributes.
> #                                                                 Consider 'structure(list(), *)' instead.
> 
> pGrunfeld[pGrunfeld$firm == "31", "valueNonExistent"]
NULL
> 
> Grunfeld[Grunfeld$firm == "31", "valueNonExistent"]
NULL
> 
> 
> # with existent firm 19
> pGrunfeld[pGrunfeld$firm == "19", "valueNonExistent"]
NULL
> 
> Grunfeld[Grunfeld$firm == "19", "valueNonExistent"]
NULL
> 
> 
> 
> ############### test pseries subsetting ("[.pseries") ################
> #### a sketch for "[.pseries" is in pdata.frame.R, but it does not work with FD models yet
> data("EmplUK", package = "plm")
> (plm(log(emp) ~ log(wage) + log(capital), data = EmplUK, model = "fd"))

Model Formula: log(emp) ~ log(wage) + log(capital)

Coefficients:
 (Intercept)    log(wage) log(capital) 
   -0.025875    -0.407007     0.435885 

> 
> data("Grunfeld", package = "plm")
> Grunfeld$fac <- factor(c("a", "b", "c", "d"))
> pGrunfeld <- pdata.frame(Grunfeld)
> 
> pseries <- pGrunfeld$inv
> pfac <- pGrunfeld$fac
> fac <- Grunfeld$fac
> 
> pseries[1]
1-1935 
 317.6 
> pseries[c(1,2)]
1-1935 1-1936 
 317.6  391.8 
> pseries[-c(1,2)]
 1-1937  1-1938  1-1939  1-1940  1-1941  1-1942  1-1943  1-1944  1-1945  1-1946 
 410.60  257.70  330.80  461.20  512.00  448.00  499.60  547.50  561.20  688.10 
 1-1947  1-1948  1-1949  1-1950  1-1951  1-1952  1-1953  1-1954  2-1935  2-1936 
 568.90  529.20  555.10  642.90  755.90  891.20 1304.40 1486.70  209.90  355.30 
 2-1937  2-1938  2-1939  2-1940  2-1941  2-1942  2-1943  2-1944  2-1945  2-1946 
 469.90  262.30  230.40  361.60  472.80  445.60  361.60  288.20  258.70  420.30 
 2-1947  2-1948  2-1949  2-1950  2-1951  2-1952  2-1953  2-1954  3-1935  3-1936 
 420.50  494.50  405.10  418.80  588.20  645.50  641.00  459.30   33.10   45.00 
 3-1937  3-1938  3-1939  3-1940  3-1941  3-1942  3-1943  3-1944  3-1945  3-1946 
  77.20   44.60   48.10   74.40  113.00   91.90   61.30   56.80   93.60  159.90 
 3-1947  3-1948  3-1949  3-1950  3-1951  3-1952  3-1953  3-1954  4-1935  4-1936 
 147.20  146.30   98.30   93.50  135.20  157.30  179.50  189.60   40.29   72.76 
 4-1937  4-1938  4-1939  4-1940  4-1941  4-1942  4-1943  4-1944  4-1945  4-1946 
  66.26   51.60   52.41   69.41   68.35   46.80   47.40   59.57   88.78   74.12 
 4-1947  4-1948  4-1949  4-1950  4-1951  4-1952  4-1953  4-1954  5-1935  5-1936 
  62.68   89.36   78.98  100.66  160.62  145.00  174.93  172.49   39.68   50.73 
 5-1937  5-1938  5-1939  5-1940  5-1941  5-1942  5-1943  5-1944  5-1945  5-1946 
  74.24   53.51   42.65   46.48   61.40   39.67   62.24   52.32   63.21   59.37 
 5-1947  5-1948  5-1949  5-1950  5-1951  5-1952  5-1953  5-1954  6-1935  6-1936 
  58.02   70.34   67.42   55.74   80.30   85.40   91.90   81.43   20.36   25.98 
 6-1937  6-1938  6-1939  6-1940  6-1941  6-1942  6-1943  6-1944  6-1945  6-1946 
  25.94   27.53   24.60   28.54   43.41   42.81   27.84   32.60   39.03   50.17 
 6-1947  6-1948  6-1949  6-1950  6-1951  6-1952  6-1953  6-1954  7-1935  7-1936 
  51.85   64.03   68.16   77.34   95.30   99.49  127.52  135.72   24.43   23.21 
 7-1937  7-1938  7-1939  7-1940  7-1941  7-1942  7-1943  7-1944  7-1945  7-1946 
  32.78   32.54   26.65   33.71   43.50   34.46   44.28   70.80   44.12   48.98 
 7-1947  7-1948  7-1949  7-1950  7-1951  7-1952  7-1953  7-1954  8-1935  8-1936 
  48.51   50.00   50.59   42.53   64.77   72.68   73.86   89.51   12.93   25.90 
 8-1937  8-1938  8-1939  8-1940  8-1941  8-1942  8-1943  8-1944  8-1945  8-1946 
  35.05   22.89   18.84   28.57   48.51   43.34   37.02   37.81   39.27   53.46 
 8-1947  8-1948  8-1949  8-1950  8-1951  8-1952  8-1953  8-1954  9-1935  9-1936 
  55.56   49.56   32.04   32.24   54.38   71.78   90.08   68.60   26.63   23.39 
 9-1937  9-1938  9-1939  9-1940  9-1941  9-1942  9-1943  9-1944  9-1945  9-1946 
  30.65   20.89   28.78   26.93   32.08   32.21   35.69   62.47   52.32   56.95 
 9-1947  9-1948  9-1949  9-1950  9-1951  9-1952  9-1953  9-1954 10-1935 10-1936 
  54.32   40.53   32.54   43.48   56.49   65.98   66.11   49.34    2.54    2.00 
10-1937 10-1938 10-1939 10-1940 10-1941 10-1942 10-1943 10-1944 10-1945 10-1946 
   2.19    1.99    2.03    1.81    2.14    1.86    0.93    1.18    1.36    2.24 
10-1947 10-1948 10-1949 10-1950 10-1951 10-1952 10-1953 10-1954 
   3.81    5.66    4.21    3.42    4.67    6.00    6.53    5.12 
> # # this also checks for the both indexes having the same levels after subsetting
> # # (unused levels in index are dropped):
> if(!isTRUE(all.equal(index(pseries[c(1)]),    index(pGrunfeld[c(1), ])))) stop("indexes not the same")
> if(!isTRUE(all.equal(index(pseries[c(1,2)]),  index(pGrunfeld[c(1,2), ])))) stop("indexes not the same")
> if(!isTRUE(all.equal(index(pseries[-c(1,2)]), index(pGrunfeld[-c(1,2), ])))) stop("indexes not the same")
> 
> # subsetting when there are no names (in this case (dummy) names are used in the subsetting code)
> pseries_nn <- unname(pGrunfeld$inv)
> pfac_nn <- unname(pGrunfeld$fac)
> fac_nn <- unname(Grunfeld$fac)
> 
> pseries_nn[1]
[1] 317.6
> pseries_nn[c(1,2)]
[1] 317.6 391.8
> pseries_nn[-c(1,2)]
  [1]  410.60  257.70  330.80  461.20  512.00  448.00  499.60  547.50  561.20
 [10]  688.10  568.90  529.20  555.10  642.90  755.90  891.20 1304.40 1486.70
 [19]  209.90  355.30  469.90  262.30  230.40  361.60  472.80  445.60  361.60
 [28]  288.20  258.70  420.30  420.50  494.50  405.10  418.80  588.20  645.50
 [37]  641.00  459.30   33.10   45.00   77.20   44.60   48.10   74.40  113.00
 [46]   91.90   61.30   56.80   93.60  159.90  147.20  146.30   98.30   93.50
 [55]  135.20  157.30  179.50  189.60   40.29   72.76   66.26   51.60   52.41
 [64]   69.41   68.35   46.80   47.40   59.57   88.78   74.12   62.68   89.36
 [73]   78.98  100.66  160.62  145.00  174.93  172.49   39.68   50.73   74.24
 [82]   53.51   42.65   46.48   61.40   39.67   62.24   52.32   63.21   59.37
 [91]   58.02   70.34   67.42   55.74   80.30   85.40   91.90   81.43   20.36
[100]   25.98   25.94   27.53   24.60   28.54   43.41   42.81   27.84   32.60
[109]   39.03   50.17   51.85   64.03   68.16   77.34   95.30   99.49  127.52
[118]  135.72   24.43   23.21   32.78   32.54   26.65   33.71   43.50   34.46
[127]   44.28   70.80   44.12   48.98   48.51   50.00   50.59   42.53   64.77
[136]   72.68   73.86   89.51   12.93   25.90   35.05   22.89   18.84   28.57
[145]   48.51   43.34   37.02   37.81   39.27   53.46   55.56   49.56   32.04
[154]   32.24   54.38   71.78   90.08   68.60   26.63   23.39   30.65   20.89
[163]   28.78   26.93   32.08   32.21   35.69   62.47   52.32   56.95   54.32
[172]   40.53   32.54   43.48   56.49   65.98   66.11   49.34    2.54    2.00
[181]    2.19    1.99    2.03    1.81    2.14    1.86    0.93    1.18    1.36
[190]    2.24    3.81    5.66    4.21    3.42    4.67    6.00    6.53    5.12
> # # # this also checks for the both indexes having the same levels after subsetting
> # # # (unused levels in index are dropped):
> if(!isTRUE(all.equal(index(pseries_nn[c(1)]),    index(pGrunfeld[c(1), ])))) stop("indexes not the same")
> if(!isTRUE(all.equal(index(pseries_nn[c(1,2)]),  index(pGrunfeld[c(1,2), ])))) stop("indexes not the same")
> if(!isTRUE(all.equal(index(pseries_nn[-c(1,2)]), index(pGrunfeld[-c(1,2), ])))) stop("indexes not the same")
> 
> 
> 
> # subsetting with character
> pseries["10-1946"]
10-1946 
   2.24 
> pseries[c("10-1935", "10-1946")]
10-1935 10-1946 
   2.54    2.24 
> 
> # character subsetting works for plain numeric:
>  series <- Grunfeld$inv
>  names(series) <- names(pseries)
>  names(fac) <- names(pfac)
>  series["10-1946"]
10-1946 
   2.24 
> 
>  if(!isTRUE(all.equal(index(pseries["10-1946"]),               index(pGrunfeld["10-1946", ])))) stop("indexes not the same")
>  if(!isTRUE(all.equal(index(pseries[c("10-1935", "10-1946")]), index(pGrunfeld[c("10-1935", "10-1946"), ])))) stop("indexes not the same")
> 
> 
> ### For c("pseries", "factor") perform additional tests of 'drop' argument
>  pfac[1, drop = TRUE]   # only level "a" should be left
1-1935 
     a 
Levels: a
>  pfac[1:3][drop = TRUE] # only level "a", "b", "c" should be left
1-1935 1-1936 1-1937 
     a      b      c 
Levels: a b c
> 
>  fac[1, drop = TRUE]
1-1935 
     a 
Levels: a
>  fac[1:3][drop = TRUE]
1-1935 1-1936 1-1937 
     a      b      c 
Levels: a b c
> 
>  pfac["nonExist"] # should be NA and levels "a" to "d"
<NA> 
<NA> 
Levels: a b c d
>  fac["nonExist"]
<NA> 
<NA> 
Levels: a b c d
> 
>  pfac["nonExist"][drop = TRUE] # should be NA and no level left
<NA> 
<NA> 
Levels: 
>  fac["nonExist"][drop = TRUE]
<NA> 
<NA> 
Levels: 
> 
> # check subsetting with NA:
> if(!isTRUE(all.equal(as.numeric(pseries[NA]), series[NA], check.attributes = FALSE))) stop("subsetting with NA not the same for pseries")
> 
>  # assign first operand's attributes:
>  pseries[1:(length(pseries)-1)] + pseries[2:length(pseries)]
 1-1935  1-1936  1-1937  1-1938  1-1939  1-1940  1-1941  1-1942  1-1943  1-1944 
 709.40  802.40  668.30  588.50  792.00  973.20  960.00  947.60 1047.10 1108.70 
 1-1945  1-1946  1-1947  1-1948  1-1949  1-1950  1-1951  1-1952  1-1953  1-1954 
1249.30 1257.00 1098.10 1084.30 1198.00 1398.80 1647.10 2195.60 2791.10 1696.60 
 2-1935  2-1936  2-1937  2-1938  2-1939  2-1940  2-1941  2-1942  2-1943  2-1944 
 565.20  825.20  732.20  492.70  592.00  834.40  918.40  807.20  649.80  546.90 
 2-1945  2-1946  2-1947  2-1948  2-1949  2-1950  2-1951  2-1952  2-1953  2-1954 
 679.00  840.80  915.00  899.60  823.90 1007.00 1233.70 1286.50 1100.30  492.40 
 3-1935  3-1936  3-1937  3-1938  3-1939  3-1940  3-1941  3-1942  3-1943  3-1944 
  78.10  122.20  121.80   92.70  122.50  187.40  204.90  153.20  118.10  150.40 
 3-1945  3-1946  3-1947  3-1948  3-1949  3-1950  3-1951  3-1952  3-1953  3-1954 
 253.50  307.10  293.50  244.60  191.80  228.70  292.50  336.80  369.10  229.89 
 4-1935  4-1936  4-1937  4-1938  4-1939  4-1940  4-1941  4-1942  4-1943  4-1944 
 113.05  139.02  117.86  104.01  121.82  137.76  115.15   94.20  106.97  148.35 
 4-1945  4-1946  4-1947  4-1948  4-1949  4-1950  4-1951  4-1952  4-1953  4-1954 
 162.90  136.80  152.04  168.34  179.64  261.28  305.62  319.93  347.42  212.17 
 5-1935  5-1936  5-1937  5-1938  5-1939  5-1940  5-1941  5-1942  5-1943  5-1944 
  90.41  124.97  127.75   96.16   89.13  107.88  101.07  101.91  114.56  115.53 
 5-1945  5-1946  5-1947  5-1948  5-1949  5-1950  5-1951  5-1952  5-1953  5-1954 
 122.58  117.39  128.36  137.76  123.16  136.04  165.70  177.30  173.33  101.79 
 6-1935  6-1936  6-1937  6-1938  6-1939  6-1940  6-1941  6-1942  6-1943  6-1944 
  46.34   51.92   53.47   52.13   53.14   71.95   86.22   70.65   60.44   71.63 
 6-1945  6-1946  6-1947  6-1948  6-1949  6-1950  6-1951  6-1952  6-1953  6-1954 
  89.20  102.02  115.88  132.19  145.50  172.64  194.79  227.01  263.24  160.15 
 7-1935  7-1936  7-1937  7-1938  7-1939  7-1940  7-1941  7-1942  7-1943  7-1944 
  47.64   55.99   65.32   59.19   60.36   77.21   77.96   78.74  115.08  114.92 
 7-1945  7-1946  7-1947  7-1948  7-1949  7-1950  7-1951  7-1952  7-1953  7-1954 
  93.10   97.49   98.51  100.59   93.12  107.30  137.45  146.54  163.37  102.44 
 8-1935  8-1936  8-1937  8-1938  8-1939  8-1940  8-1941  8-1942  8-1943  8-1944 
  38.83   60.95   57.94   41.73   47.41   77.08   91.85   80.36   74.83   77.08 
 8-1945  8-1946  8-1947  8-1948  8-1949  8-1950  8-1951  8-1952  8-1953  8-1954 
  92.73  109.02  105.12   81.60   64.28   86.62  126.16  161.86  158.68   95.23 
 9-1935  9-1936  9-1937  9-1938  9-1939  9-1940  9-1941  9-1942  9-1943  9-1944 
  50.02   54.04   51.54   49.67   55.71   59.01   64.29   67.90   98.16  114.79 
 9-1945  9-1946  9-1947  9-1948  9-1949  9-1950  9-1951  9-1952  9-1953  9-1954 
 109.27  111.27   94.85   73.07   76.02   99.97  122.47  132.09  115.45   51.88 
10-1935 10-1936 10-1937 10-1938 10-1939 10-1940 10-1941 10-1942 10-1943 10-1944 
   4.54    4.19    4.18    4.02    3.84    3.95    4.00    2.79    2.11    2.54 
10-1945 10-1946 10-1947 10-1948 10-1949 10-1950 10-1951 10-1952 10-1953 
   3.60    6.05    9.47    9.87    7.63    8.09   10.67   12.53   11.65 
>  head(index(pseries[1:(length(pseries)-1)]))
  firm year
1    1 1935
2    1 1936
3    1 1937
4    1 1938
5    1 1939
6    1 1940
>  head(index(pseries[2:length(pseries)]))
  firm year
2    1 1936
3    1 1937
4    1 1938
5    1 1939
6    1 1940
7    1 1941
>  
>  
>  # ... just as in base R for names:
>  i1 <- 1:100; i2 <- 1:100
>  names(i1) <- 1:100; names(i2) <- LETTERS[(0:99 %% 26) + 1]
>  head(i1)
1 2 3 4 5 6 
1 2 3 4 5 6 
>  head(i2)
A B C D E F 
1 2 3 4 5 6 
>  # names are taken from first operand in base R numerics,
>  # so for pseries it is ok to assign the index of the first operand
>  names(i1 + i2)
  [1] "1"   "2"   "3"   "4"   "5"   "6"   "7"   "8"   "9"   "10"  "11"  "12" 
 [13] "13"  "14"  "15"  "16"  "17"  "18"  "19"  "20"  "21"  "22"  "23"  "24" 
 [25] "25"  "26"  "27"  "28"  "29"  "30"  "31"  "32"  "33"  "34"  "35"  "36" 
 [37] "37"  "38"  "39"  "40"  "41"  "42"  "43"  "44"  "45"  "46"  "47"  "48" 
 [49] "49"  "50"  "51"  "52"  "53"  "54"  "55"  "56"  "57"  "58"  "59"  "60" 
 [61] "61"  "62"  "63"  "64"  "65"  "66"  "67"  "68"  "69"  "70"  "71"  "72" 
 [73] "73"  "74"  "75"  "76"  "77"  "78"  "79"  "80"  "81"  "82"  "83"  "84" 
 [85] "85"  "86"  "87"  "88"  "89"  "90"  "91"  "92"  "93"  "94"  "95"  "96" 
 [97] "97"  "98"  "99"  "100"
>  names(i2 + i1)
  [1] "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R"
 [19] "S" "T" "U" "V" "W" "X" "Y" "Z" "A" "B" "C" "D" "E" "F" "G" "H" "I" "J"
 [37] "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V" "W" "X" "Y" "Z" "A" "B"
 [55] "C" "D" "E" "F" "G" "H" "I" "J" "K" "L" "M" "N" "O" "P" "Q" "R" "S" "T"
 [73] "U" "V" "W" "X" "Y" "Z" "A" "B" "C" "D" "E" "F" "G" "H" "I" "J" "K" "L"
 [91] "M" "N" "O" "P" "Q" "R" "S" "T" "U" "V"
>  
> 
> ## These are ok (give (about) same error msg for plain numeric as for pseries numeric)
> # pseries[1, ] # Error in x[...] : incorrect number of dimensions
> # series[1, ]  # Error during wrapup: incorrect number of dimensions
> 
> 
> proc.time()
   user  system elapsed 
   1.01    0.25    1.32 
